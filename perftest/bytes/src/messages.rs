// This file is generated by rust-protobuf 1.6.0. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct TestMessage {
    // message fields
    s1: ::protobuf::SingularField<::std::string::String>,
    pub s1_offset: u64,
    b1: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    pub b1_offset: u64,
    sr: ::protobuf::RepeatedField<::std::string::String>,
    pub sr_offset: ::std::vec::Vec<u64>,
    br: ::protobuf::RepeatedField<::std::vec::Vec<u8>>,
    pub br_offset: ::std::vec::Vec<u64>,
    nested: ::protobuf::SingularPtrField<TestMessage>,
    pub nested_offset: u64,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl TestMessage {
    pub fn new() -> TestMessage {
        ::std::default::Default::default()
    }

    // optional string s1 = 1;

    pub fn clear_s1(&mut self) {
        self.s1.clear();
    }

    pub fn has_s1(&self) -> bool {
        self.s1.is_some()
    }

    // Param is passed by value, moved
    pub fn set_s1(&mut self, v: ::std::string::String) {
        self.s1 = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_s1(&mut self) -> &mut ::std::string::String {
        if self.s1.is_none() {
            self.s1.set_default();
        }
        self.s1.as_mut().unwrap()
    }

    // Take field
    pub fn take_s1(&mut self) -> ::std::string::String {
        self.s1.take().unwrap_or_else(|| ::std::string::String::new())
    }

    pub fn get_s1(&self) -> &str {
        match self.s1.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }

    // optional bytes b1 = 2;

    pub fn clear_b1(&mut self) {
        self.b1.clear();
    }

    pub fn has_b1(&self) -> bool {
        self.b1.is_some()
    }

    // Param is passed by value, moved
    pub fn set_b1(&mut self, v: ::std::vec::Vec<u8>) {
        self.b1 = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_b1(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.b1.is_none() {
            self.b1.set_default();
        }
        self.b1.as_mut().unwrap()
    }

    // Take field
    pub fn take_b1(&mut self) -> ::std::vec::Vec<u8> {
        self.b1.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    pub fn get_b1(&self) -> &[u8] {
        match self.b1.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }

    // repeated string sr = 3;

    pub fn clear_sr(&mut self) {
        self.sr.clear();
    }

    // Param is passed by value, moved
    pub fn set_sr(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.sr = v;
    }

    // Mutable pointer to the field.
    pub fn mut_sr(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.sr
    }

    // Take field
    pub fn take_sr(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.sr, ::protobuf::RepeatedField::new())
    }

    pub fn get_sr(&self) -> &[::std::string::String] {
        &self.sr
    }

    // repeated bytes br = 4;

    pub fn clear_br(&mut self) {
        self.br.clear();
    }

    // Param is passed by value, moved
    pub fn set_br(&mut self, v: ::protobuf::RepeatedField<::std::vec::Vec<u8>>) {
        self.br = v;
    }

    // Mutable pointer to the field.
    pub fn mut_br(&mut self) -> &mut ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        &mut self.br
    }

    // Take field
    pub fn take_br(&mut self) -> ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        ::std::mem::replace(&mut self.br, ::protobuf::RepeatedField::new())
    }

    pub fn get_br(&self) -> &[::std::vec::Vec<u8>] {
        &self.br
    }

    // optional .TestMessage nested = 11;

    pub fn clear_nested(&mut self) {
        self.nested.clear();
    }

    pub fn has_nested(&self) -> bool {
        self.nested.is_some()
    }

    // Param is passed by value, moved
    pub fn set_nested(&mut self, v: TestMessage) {
        self.nested = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_nested(&mut self) -> &mut TestMessage {
        if self.nested.is_none() {
            self.nested.set_default();
        }
        self.nested.as_mut().unwrap()
    }

    // Take field
    pub fn take_nested(&mut self) -> TestMessage {
        self.nested.take().unwrap_or_else(|| TestMessage::new())
    }

    pub fn get_nested(&self) -> &TestMessage {
        self.nested.as_ref().unwrap_or_else(|| TestMessage::default_instance())
    }
}

impl ::protobuf::Message for TestMessage {
    fn is_initialized(&self) -> bool {
        for v in &self.nested {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.s1)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.b1)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.sr)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_bytes_into(wire_type, is, &mut self.br)?;
                },
                11 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.nested)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.s1.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(ref v) = self.b1.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        for value in &self.sr {
            my_size += ::protobuf::rt::string_size(3, &value);
        };
        for value in &self.br {
            my_size += ::protobuf::rt::bytes_size(4, &value);
        };
        if let Some(ref v) = self.nested.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.s1.as_ref() {
            os.write_string(1, &v)?;
        }
        if let Some(ref v) = self.b1.as_ref() {
            os.write_bytes(2, &v)?;
        }
        for v in &self.sr {
            os.write_string(3, &v)?;
        };
        for v in &self.br {
            os.write_bytes(4, &v)?;
        };
        if let Some(ref v) = self.nested.as_ref() {
            os.write_tag(11, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::Message::descriptor_static(None::<Self>)
    }

    fn new() -> TestMessage {
        TestMessage::new()
    }

    fn descriptor_static(_: ::std::option::Option<TestMessage>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "s1",
                    |m: &TestMessage| { &m.s1 },
                    |m: &mut TestMessage| { &mut m.s1 },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "b1",
                    |m: &TestMessage| { &m.b1 },
                    |m: &mut TestMessage| { &mut m.b1 },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "sr",
                    |m: &TestMessage| { &m.sr },
                    |m: &mut TestMessage| { &mut m.sr },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "br",
                    |m: &TestMessage| { &m.br },
                    |m: &mut TestMessage| { &mut m.br },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TestMessage>>(
                    "nested",
                    |m: &TestMessage| { &m.nested },
                    |m: &mut TestMessage| { &mut m.nested },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<TestMessage>(
                    "TestMessage",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static TestMessage {
        static mut instance: ::protobuf::lazy::Lazy<TestMessage> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const TestMessage,
        };
        unsafe {
            instance.get(TestMessage::new)
        }
    }
}

impl ::protobuf::Clear for TestMessage {
    fn clear(&mut self) {
        self.clear_s1();
        self.clear_b1();
        self.clear_sr();
        self.clear_br();
        self.clear_nested();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TestMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TestMessage {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TestMessageWithBytes {
    // message fields
    s1: ::std::option::Option<::protobuf::Chars>,
    pub s1_offset: u64,
    b1: ::std::option::Option<::bytes::Bytes>,
    pub b1_offset: u64,
    sr: ::std::vec::Vec<::protobuf::Chars>,
    pub sr_offset: ::std::vec::Vec<u64>,
    br: ::std::vec::Vec<::bytes::Bytes>,
    pub br_offset: ::std::vec::Vec<u64>,
    nested: ::protobuf::SingularPtrField<TestMessageWithBytes>,
    pub nested_offset: u64,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl TestMessageWithBytes {
    pub fn new() -> TestMessageWithBytes {
        ::std::default::Default::default()
    }

    // optional string s1 = 1;

    pub fn clear_s1(&mut self) {
        self.s1 = ::std::option::Option::None;
    }

    pub fn has_s1(&self) -> bool {
        self.s1.is_some()
    }

    // Param is passed by value, moved
    pub fn set_s1(&mut self, v: ::protobuf::Chars) {
        self.s1 = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_s1(&mut self) -> &mut ::protobuf::Chars {
        if self.s1.is_none() {
            self.s1 = ::std::option::Option::Some(::protobuf::Chars::new());
        }
        self.s1.as_mut().unwrap()
    }

    // Take field
    pub fn take_s1(&mut self) -> ::protobuf::Chars {
        self.s1.take().unwrap_or_else(|| ::protobuf::Chars::new())
    }

    pub fn get_s1(&self) -> &str {
        match self.s1.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    // optional bytes b1 = 2;

    pub fn clear_b1(&mut self) {
        self.b1 = ::std::option::Option::None;
    }

    pub fn has_b1(&self) -> bool {
        self.b1.is_some()
    }

    // Param is passed by value, moved
    pub fn set_b1(&mut self, v: ::bytes::Bytes) {
        self.b1 = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_b1(&mut self) -> &mut ::bytes::Bytes {
        if self.b1.is_none() {
            self.b1 = ::std::option::Option::Some(::bytes::Bytes::new());
        }
        self.b1.as_mut().unwrap()
    }

    // Take field
    pub fn take_b1(&mut self) -> ::bytes::Bytes {
        self.b1.take().unwrap_or_else(|| ::bytes::Bytes::new())
    }

    pub fn get_b1(&self) -> &[u8] {
        match self.b1.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    // repeated string sr = 3;

    pub fn clear_sr(&mut self) {
        self.sr.clear();
    }

    // Param is passed by value, moved
    pub fn set_sr(&mut self, v: ::std::vec::Vec<::protobuf::Chars>) {
        self.sr = v;
    }

    // Mutable pointer to the field.
    pub fn mut_sr(&mut self) -> &mut ::std::vec::Vec<::protobuf::Chars> {
        &mut self.sr
    }

    // Take field
    pub fn take_sr(&mut self) -> ::std::vec::Vec<::protobuf::Chars> {
        ::std::mem::replace(&mut self.sr, ::std::vec::Vec::new())
    }

    pub fn get_sr(&self) -> &[::protobuf::Chars] {
        &self.sr
    }

    // repeated bytes br = 4;

    pub fn clear_br(&mut self) {
        self.br.clear();
    }

    // Param is passed by value, moved
    pub fn set_br(&mut self, v: ::std::vec::Vec<::bytes::Bytes>) {
        self.br = v;
    }

    // Mutable pointer to the field.
    pub fn mut_br(&mut self) -> &mut ::std::vec::Vec<::bytes::Bytes> {
        &mut self.br
    }

    // Take field
    pub fn take_br(&mut self) -> ::std::vec::Vec<::bytes::Bytes> {
        ::std::mem::replace(&mut self.br, ::std::vec::Vec::new())
    }

    pub fn get_br(&self) -> &[::bytes::Bytes] {
        &self.br
    }

    // optional .TestMessageWithBytes nested = 11;

    pub fn clear_nested(&mut self) {
        self.nested.clear();
    }

    pub fn has_nested(&self) -> bool {
        self.nested.is_some()
    }

    // Param is passed by value, moved
    pub fn set_nested(&mut self, v: TestMessageWithBytes) {
        self.nested = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_nested(&mut self) -> &mut TestMessageWithBytes {
        if self.nested.is_none() {
            self.nested.set_default();
        }
        self.nested.as_mut().unwrap()
    }

    // Take field
    pub fn take_nested(&mut self) -> TestMessageWithBytes {
        self.nested.take().unwrap_or_else(|| TestMessageWithBytes::new())
    }

    pub fn get_nested(&self) -> &TestMessageWithBytes {
        self.nested.as_ref().unwrap_or_else(|| TestMessageWithBytes::default_instance())
    }
}

impl ::protobuf::Message for TestMessageWithBytes {
    fn is_initialized(&self) -> bool {
        for v in &self.nested {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_carllerche_string_into(wire_type, is, &mut self.s1)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_carllerche_bytes_into(wire_type, is, &mut self.b1)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_carllerche_string_into(wire_type, is, &mut self.sr)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_carllerche_bytes_into(wire_type, is, &mut self.br)?;
                },
                11 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.nested)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.s1.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(ref v) = self.b1.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        for value in &self.sr {
            my_size += ::protobuf::rt::string_size(3, &value);
        };
        for value in &self.br {
            my_size += ::protobuf::rt::bytes_size(4, &value);
        };
        if let Some(ref v) = self.nested.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.s1.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(ref v) = self.b1.as_ref() {
            os.write_bytes(2, v)?;
        }
        for v in &self.sr {
            os.write_string(3, &v)?;
        };
        for v in &self.br {
            os.write_bytes(4, &v)?;
        };
        if let Some(ref v) = self.nested.as_ref() {
            os.write_tag(11, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::Message::descriptor_static(None::<Self>)
    }

    fn new() -> TestMessageWithBytes {
        TestMessageWithBytes::new()
    }

    fn descriptor_static(_: ::std::option::Option<TestMessageWithBytes>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeCarllercheChars>(
                    "s1",
                    |m: &TestMessageWithBytes| { &m.s1 },
                    |m: &mut TestMessageWithBytes| { &mut m.s1 },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeCarllercheBytes>(
                    "b1",
                    |m: &TestMessageWithBytes| { &m.b1 },
                    |m: &mut TestMessageWithBytes| { &mut m.b1 },
                ));
                fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeCarllercheChars>(
                    "sr",
                    |m: &TestMessageWithBytes| { &m.sr },
                    |m: &mut TestMessageWithBytes| { &mut m.sr },
                ));
                fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeCarllercheBytes>(
                    "br",
                    |m: &TestMessageWithBytes| { &m.br },
                    |m: &mut TestMessageWithBytes| { &mut m.br },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TestMessageWithBytes>>(
                    "nested",
                    |m: &TestMessageWithBytes| { &m.nested },
                    |m: &mut TestMessageWithBytes| { &mut m.nested },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<TestMessageWithBytes>(
                    "TestMessageWithBytes",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static TestMessageWithBytes {
        static mut instance: ::protobuf::lazy::Lazy<TestMessageWithBytes> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const TestMessageWithBytes,
        };
        unsafe {
            instance.get(TestMessageWithBytes::new)
        }
    }
}

impl ::protobuf::Clear for TestMessageWithBytes {
    fn clear(&mut self) {
        self.clear_s1();
        self.clear_b1();
        self.clear_sr();
        self.clear_br();
        self.clear_nested();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TestMessageWithBytes {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TestMessageWithBytes {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0emessages.proto\x1a\x0frustproto.proto\"s\n\x0bTestMessage\x12\x0e\
    \n\x02s1\x18\x01\x20\x01(\tR\x02s1\x12\x0e\n\x02b1\x18\x02\x20\x01(\x0cR\
    \x02b1\x12\x0e\n\x02sr\x18\x03\x20\x03(\tR\x02sr\x12\x0e\n\x02br\x18\x04\
    \x20\x03(\x0cR\x02br\x12$\n\x06nested\x18\x0b\x20\x01(\x0b2\x0c.TestMess\
    ageR\x06nested\"\x8f\x01\n\x14TestMessageWithBytes\x12\x0e\n\x02s1\x18\
    \x01\x20\x01(\tR\x02s1\x12\x0e\n\x02b1\x18\x02\x20\x01(\x0cR\x02b1\x12\
    \x0e\n\x02sr\x18\x03\x20\x03(\tR\x02sr\x12\x0e\n\x02br\x18\x04\x20\x03(\
    \x0cR\x02br\x12-\n\x06nested\x18\x0b\x20\x01(\x0b2\x15.TestMessageWithBy\
    tesR\x06nested:\x08\x98\xa7\x08\x01\xa0\xa7\x08\x01\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
